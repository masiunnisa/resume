{
  "manifest": {
    "name": "promise-all-reject-late",
    "version": "1.0.1",
    "description": "Like Promise.all, but save rejections until all promises are resolved",
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "https://izs.me"
    },
    "license": "ISC",
    "scripts": {
      "test": "tap",
      "preversion": "npm test",
      "postversion": "npm publish",
      "prepublishOnly": "git push origin --follow-tags"
    },
    "tap": {
      "check-coverage": true
    },
    "devDependencies": {
      "tap": "^14.10.5"
    },
    "funding": {
      "url": "https://github.com/sponsors/isaacs"
    },
    "_registry": "npm",
    "_loc": "/home/masi/.cache/yarn/v6/npm-promise-all-reject-late-1.0.1-f8ebf13483e5ca91ad809ccc2fcf25f26f8643c2-integrity/node_modules/promise-all-reject-late/package.json",
    "readmeFilename": "README.md",
    "readme": "# promise-all-reject-late\n\nLike Promise.all, but save rejections until all promises are resolved.\n\nThis is handy when you want to do a bunch of things in parallel, and\nrollback on failure, without clobbering or conflicting with those parallel\nactions that may be in flight.  For example, creating a bunch of files,\nand deleting any if they don't all succeed.\n\nExample:\n\n```js\nconst lateReject = require('promise-all-reject-late')\n\nconst { promisify } = require('util')\nconst fs = require('fs')\nconst writeFile = promisify(fs.writeFile)\n\nconst createFilesOrRollback = (files) => {\n  return lateReject(files.map(file => writeFile(file, 'some data')))\n    .catch(er => {\n      // try to clean up, then fail with the initial error\n      // we know that all write attempts are finished at this point\n      return lateReject(files.map(file => rimraf(file)))\n        .catch(er => {\n          console.error('failed to clean up, youre on your own i guess', er)\n        })\n        .then(() => {\n          // fail with the original error\n          throw er\n        })\n    })\n}\n```\n\n## API\n\n* `lateReject([array, of, promises])` - Resolve all the promises,\n  returning a promise that rejects with the first error, or resolves with\n  the array of results, but only after all promises are settled.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promise-all-reject-late/-/promise-all-reject-late-1.0.1.tgz#f8ebf13483e5ca91ad809ccc2fcf25f26f8643c2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promise-all-reject-late/-/promise-all-reject-late-1.0.1.tgz",
    "hash": "f8ebf13483e5ca91ad809ccc2fcf25f26f8643c2",
    "integrity": "sha512-vuf0Lf0lOxyQREH7GDIOUMLS7kz+gs8i6B+Yi8dC68a2sychGrHTJYghMBD6k7eUcH0H5P73EckCA48xijWqXw==",
    "registry": "npm",
    "packageName": "promise-all-reject-late",
    "cacheIntegrity": "sha512-vuf0Lf0lOxyQREH7GDIOUMLS7kz+gs8i6B+Yi8dC68a2sychGrHTJYghMBD6k7eUcH0H5P73EckCA48xijWqXw== sha1-+OvxNIPlypGtgJzML88l8m+GQ8I="
  },
  "registry": "npm",
  "hash": "f8ebf13483e5ca91ad809ccc2fcf25f26f8643c2"
}